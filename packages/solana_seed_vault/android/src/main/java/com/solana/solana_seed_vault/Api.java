// Autogenerated from Pigeon (v3.2.9), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.solana.solana_seed_vault;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Api {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class AccountDto {
    private @NonNull Long id;
    public @NonNull Long getId() { return id; }
    public void setId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"id\" is null.");
      }
      this.id = setterArg;
    }

    private @NonNull String name;
    public @NonNull String getName() { return name; }
    public void setName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"name\" is null.");
      }
      this.name = setterArg;
    }

    private @NonNull String derivationPath;
    public @NonNull String getDerivationPath() { return derivationPath; }
    public void setDerivationPath(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"derivationPath\" is null.");
      }
      this.derivationPath = setterArg;
    }

    private @NonNull String publicKeyEncoded;
    public @NonNull String getPublicKeyEncoded() { return publicKeyEncoded; }
    public void setPublicKeyEncoded(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"publicKeyEncoded\" is null.");
      }
      this.publicKeyEncoded = setterArg;
    }

    private @NonNull Boolean isUserWallet;
    public @NonNull Boolean getIsUserWallet() { return isUserWallet; }
    public void setIsUserWallet(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"isUserWallet\" is null.");
      }
      this.isUserWallet = setterArg;
    }

    private @NonNull Boolean isValid;
    public @NonNull Boolean getIsValid() { return isValid; }
    public void setIsValid(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"isValid\" is null.");
      }
      this.isValid = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private AccountDto() {}
    public static final class Builder {
      private @Nullable Long id;
      public @NonNull Builder setId(@NonNull Long setterArg) {
        this.id = setterArg;
        return this;
      }
      private @Nullable String name;
      public @NonNull Builder setName(@NonNull String setterArg) {
        this.name = setterArg;
        return this;
      }
      private @Nullable String derivationPath;
      public @NonNull Builder setDerivationPath(@NonNull String setterArg) {
        this.derivationPath = setterArg;
        return this;
      }
      private @Nullable String publicKeyEncoded;
      public @NonNull Builder setPublicKeyEncoded(@NonNull String setterArg) {
        this.publicKeyEncoded = setterArg;
        return this;
      }
      private @Nullable Boolean isUserWallet;
      public @NonNull Builder setIsUserWallet(@NonNull Boolean setterArg) {
        this.isUserWallet = setterArg;
        return this;
      }
      private @Nullable Boolean isValid;
      public @NonNull Builder setIsValid(@NonNull Boolean setterArg) {
        this.isValid = setterArg;
        return this;
      }
      public @NonNull AccountDto build() {
        AccountDto pigeonReturn = new AccountDto();
        pigeonReturn.setId(id);
        pigeonReturn.setName(name);
        pigeonReturn.setDerivationPath(derivationPath);
        pigeonReturn.setPublicKeyEncoded(publicKeyEncoded);
        pigeonReturn.setIsUserWallet(isUserWallet);
        pigeonReturn.setIsValid(isValid);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("id", id);
      toMapResult.put("name", name);
      toMapResult.put("derivationPath", derivationPath);
      toMapResult.put("publicKeyEncoded", publicKeyEncoded);
      toMapResult.put("isUserWallet", isUserWallet);
      toMapResult.put("isValid", isValid);
      return toMapResult;
    }
    static @NonNull AccountDto fromMap(@NonNull Map<String, Object> map) {
      AccountDto pigeonResult = new AccountDto();
      Object id = map.get("id");
      pigeonResult.setId((id == null) ? null : ((id instanceof Integer) ? (Integer)id : (Long)id));
      Object name = map.get("name");
      pigeonResult.setName((String)name);
      Object derivationPath = map.get("derivationPath");
      pigeonResult.setDerivationPath((String)derivationPath);
      Object publicKeyEncoded = map.get("publicKeyEncoded");
      pigeonResult.setPublicKeyEncoded((String)publicKeyEncoded);
      Object isUserWallet = map.get("isUserWallet");
      pigeonResult.setIsUserWallet((Boolean)isUserWallet);
      Object isValid = map.get("isValid");
      pigeonResult.setIsValid((Boolean)isValid);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SeedDto {
    private @NonNull Long authToken;
    public @NonNull Long getAuthToken() { return authToken; }
    public void setAuthToken(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"authToken\" is null.");
      }
      this.authToken = setterArg;
    }

    private @NonNull String name;
    public @NonNull String getName() { return name; }
    public void setName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"name\" is null.");
      }
      this.name = setterArg;
    }

    private @NonNull Long purpose;
    public @NonNull Long getPurpose() { return purpose; }
    public void setPurpose(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"purpose\" is null.");
      }
      this.purpose = setterArg;
    }

    private @NonNull List<AccountDto> accounts;
    public @NonNull List<AccountDto> getAccounts() { return accounts; }
    public void setAccounts(@NonNull List<AccountDto> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"accounts\" is null.");
      }
      this.accounts = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private SeedDto() {}
    public static final class Builder {
      private @Nullable Long authToken;
      public @NonNull Builder setAuthToken(@NonNull Long setterArg) {
        this.authToken = setterArg;
        return this;
      }
      private @Nullable String name;
      public @NonNull Builder setName(@NonNull String setterArg) {
        this.name = setterArg;
        return this;
      }
      private @Nullable Long purpose;
      public @NonNull Builder setPurpose(@NonNull Long setterArg) {
        this.purpose = setterArg;
        return this;
      }
      private @Nullable List<AccountDto> accounts;
      public @NonNull Builder setAccounts(@NonNull List<AccountDto> setterArg) {
        this.accounts = setterArg;
        return this;
      }
      public @NonNull SeedDto build() {
        SeedDto pigeonReturn = new SeedDto();
        pigeonReturn.setAuthToken(authToken);
        pigeonReturn.setName(name);
        pigeonReturn.setPurpose(purpose);
        pigeonReturn.setAccounts(accounts);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("authToken", authToken);
      toMapResult.put("name", name);
      toMapResult.put("purpose", purpose);
      toMapResult.put("accounts", accounts);
      return toMapResult;
    }
    static @NonNull SeedDto fromMap(@NonNull Map<String, Object> map) {
      SeedDto pigeonResult = new SeedDto();
      Object authToken = map.get("authToken");
      pigeonResult.setAuthToken((authToken == null) ? null : ((authToken instanceof Integer) ? (Integer)authToken : (Long)authToken));
      Object name = map.get("name");
      pigeonResult.setName((String)name);
      Object purpose = map.get("purpose");
      pigeonResult.setPurpose((purpose == null) ? null : ((purpose instanceof Integer) ? (Integer)purpose : (Long)purpose));
      Object accounts = map.get("accounts");
      pigeonResult.setAccounts((List<AccountDto>)accounts);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ImplementationLimitsDto {
    private @NonNull Long maxBip32PathDepth;
    public @NonNull Long getMaxBip32PathDepth() { return maxBip32PathDepth; }
    public void setMaxBip32PathDepth(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"maxBip32PathDepth\" is null.");
      }
      this.maxBip32PathDepth = setterArg;
    }

    private @Nullable Long maxSigningRequests;
    public @Nullable Long getMaxSigningRequests() { return maxSigningRequests; }
    public void setMaxSigningRequests(@Nullable Long setterArg) {
      this.maxSigningRequests = setterArg;
    }

    private @Nullable Long maxRequestedSignatures;
    public @Nullable Long getMaxRequestedSignatures() { return maxRequestedSignatures; }
    public void setMaxRequestedSignatures(@Nullable Long setterArg) {
      this.maxRequestedSignatures = setterArg;
    }

    private @Nullable Long maxRequestedPublicKeys;
    public @Nullable Long getMaxRequestedPublicKeys() { return maxRequestedPublicKeys; }
    public void setMaxRequestedPublicKeys(@Nullable Long setterArg) {
      this.maxRequestedPublicKeys = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private ImplementationLimitsDto() {}
    public static final class Builder {
      private @Nullable Long maxBip32PathDepth;
      public @NonNull Builder setMaxBip32PathDepth(@NonNull Long setterArg) {
        this.maxBip32PathDepth = setterArg;
        return this;
      }
      private @Nullable Long maxSigningRequests;
      public @NonNull Builder setMaxSigningRequests(@Nullable Long setterArg) {
        this.maxSigningRequests = setterArg;
        return this;
      }
      private @Nullable Long maxRequestedSignatures;
      public @NonNull Builder setMaxRequestedSignatures(@Nullable Long setterArg) {
        this.maxRequestedSignatures = setterArg;
        return this;
      }
      private @Nullable Long maxRequestedPublicKeys;
      public @NonNull Builder setMaxRequestedPublicKeys(@Nullable Long setterArg) {
        this.maxRequestedPublicKeys = setterArg;
        return this;
      }
      public @NonNull ImplementationLimitsDto build() {
        ImplementationLimitsDto pigeonReturn = new ImplementationLimitsDto();
        pigeonReturn.setMaxBip32PathDepth(maxBip32PathDepth);
        pigeonReturn.setMaxSigningRequests(maxSigningRequests);
        pigeonReturn.setMaxRequestedSignatures(maxRequestedSignatures);
        pigeonReturn.setMaxRequestedPublicKeys(maxRequestedPublicKeys);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("maxBip32PathDepth", maxBip32PathDepth);
      toMapResult.put("maxSigningRequests", maxSigningRequests);
      toMapResult.put("maxRequestedSignatures", maxRequestedSignatures);
      toMapResult.put("maxRequestedPublicKeys", maxRequestedPublicKeys);
      return toMapResult;
    }
    static @NonNull ImplementationLimitsDto fromMap(@NonNull Map<String, Object> map) {
      ImplementationLimitsDto pigeonResult = new ImplementationLimitsDto();
      Object maxBip32PathDepth = map.get("maxBip32PathDepth");
      pigeonResult.setMaxBip32PathDepth((maxBip32PathDepth == null) ? null : ((maxBip32PathDepth instanceof Integer) ? (Integer)maxBip32PathDepth : (Long)maxBip32PathDepth));
      Object maxSigningRequests = map.get("maxSigningRequests");
      pigeonResult.setMaxSigningRequests((maxSigningRequests == null) ? null : ((maxSigningRequests instanceof Integer) ? (Integer)maxSigningRequests : (Long)maxSigningRequests));
      Object maxRequestedSignatures = map.get("maxRequestedSignatures");
      pigeonResult.setMaxRequestedSignatures((maxRequestedSignatures == null) ? null : ((maxRequestedSignatures instanceof Integer) ? (Integer)maxRequestedSignatures : (Long)maxRequestedSignatures));
      Object maxRequestedPublicKeys = map.get("maxRequestedPublicKeys");
      pigeonResult.setMaxRequestedPublicKeys((maxRequestedPublicKeys == null) ? null : ((maxRequestedPublicKeys instanceof Integer) ? (Integer)maxRequestedPublicKeys : (Long)maxRequestedPublicKeys));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class BipLevelDto {
    private @NonNull Long index;
    public @NonNull Long getIndex() { return index; }
    public void setIndex(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"index\" is null.");
      }
      this.index = setterArg;
    }

    private @NonNull Boolean hardened;
    public @NonNull Boolean getHardened() { return hardened; }
    public void setHardened(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"hardened\" is null.");
      }
      this.hardened = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private BipLevelDto() {}
    public static final class Builder {
      private @Nullable Long index;
      public @NonNull Builder setIndex(@NonNull Long setterArg) {
        this.index = setterArg;
        return this;
      }
      private @Nullable Boolean hardened;
      public @NonNull Builder setHardened(@NonNull Boolean setterArg) {
        this.hardened = setterArg;
        return this;
      }
      public @NonNull BipLevelDto build() {
        BipLevelDto pigeonReturn = new BipLevelDto();
        pigeonReturn.setIndex(index);
        pigeonReturn.setHardened(hardened);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("index", index);
      toMapResult.put("hardened", hardened);
      return toMapResult;
    }
    static @NonNull BipLevelDto fromMap(@NonNull Map<String, Object> map) {
      BipLevelDto pigeonResult = new BipLevelDto();
      Object index = map.get("index");
      pigeonResult.setIndex((index == null) ? null : ((index instanceof Integer) ? (Integer)index : (Long)index));
      Object hardened = map.get("hardened");
      pigeonResult.setHardened((Boolean)hardened);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Bip44DerivationDto {
    private @Nullable BipLevelDto account;
    public @Nullable BipLevelDto getAccount() { return account; }
    public void setAccount(@Nullable BipLevelDto setterArg) {
      this.account = setterArg;
    }

    private @Nullable BipLevelDto change;
    public @Nullable BipLevelDto getChange() { return change; }
    public void setChange(@Nullable BipLevelDto setterArg) {
      this.change = setterArg;
    }

    private @Nullable BipLevelDto addressIndex;
    public @Nullable BipLevelDto getAddressIndex() { return addressIndex; }
    public void setAddressIndex(@Nullable BipLevelDto setterArg) {
      this.addressIndex = setterArg;
    }

    public static final class Builder {
      private @Nullable BipLevelDto account;
      public @NonNull Builder setAccount(@Nullable BipLevelDto setterArg) {
        this.account = setterArg;
        return this;
      }
      private @Nullable BipLevelDto change;
      public @NonNull Builder setChange(@Nullable BipLevelDto setterArg) {
        this.change = setterArg;
        return this;
      }
      private @Nullable BipLevelDto addressIndex;
      public @NonNull Builder setAddressIndex(@Nullable BipLevelDto setterArg) {
        this.addressIndex = setterArg;
        return this;
      }
      public @NonNull Bip44DerivationDto build() {
        Bip44DerivationDto pigeonReturn = new Bip44DerivationDto();
        pigeonReturn.setAccount(account);
        pigeonReturn.setChange(change);
        pigeonReturn.setAddressIndex(addressIndex);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("account", (account == null) ? null : account.toMap());
      toMapResult.put("change", (change == null) ? null : change.toMap());
      toMapResult.put("addressIndex", (addressIndex == null) ? null : addressIndex.toMap());
      return toMapResult;
    }
    static @NonNull Bip44DerivationDto fromMap(@NonNull Map<String, Object> map) {
      Bip44DerivationDto pigeonResult = new Bip44DerivationDto();
      Object account = map.get("account");
      pigeonResult.setAccount((account == null) ? null : BipLevelDto.fromMap((Map)account));
      Object change = map.get("change");
      pigeonResult.setChange((change == null) ? null : BipLevelDto.fromMap((Map)change));
      Object addressIndex = map.get("addressIndex");
      pigeonResult.setAddressIndex((addressIndex == null) ? null : BipLevelDto.fromMap((Map)addressIndex));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SigningRequestDto {
    private @NonNull byte[] payload;
    public @NonNull byte[] getPayload() { return payload; }
    public void setPayload(@NonNull byte[] setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"payload\" is null.");
      }
      this.payload = setterArg;
    }

    private @NonNull List<String> requestedSignatures;
    public @NonNull List<String> getRequestedSignatures() { return requestedSignatures; }
    public void setRequestedSignatures(@NonNull List<String> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"requestedSignatures\" is null.");
      }
      this.requestedSignatures = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private SigningRequestDto() {}
    public static final class Builder {
      private @Nullable byte[] payload;
      public @NonNull Builder setPayload(@NonNull byte[] setterArg) {
        this.payload = setterArg;
        return this;
      }
      private @Nullable List<String> requestedSignatures;
      public @NonNull Builder setRequestedSignatures(@NonNull List<String> setterArg) {
        this.requestedSignatures = setterArg;
        return this;
      }
      public @NonNull SigningRequestDto build() {
        SigningRequestDto pigeonReturn = new SigningRequestDto();
        pigeonReturn.setPayload(payload);
        pigeonReturn.setRequestedSignatures(requestedSignatures);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("payload", payload);
      toMapResult.put("requestedSignatures", requestedSignatures);
      return toMapResult;
    }
    static @NonNull SigningRequestDto fromMap(@NonNull Map<String, Object> map) {
      SigningRequestDto pigeonResult = new SigningRequestDto();
      Object payload = map.get("payload");
      pigeonResult.setPayload((byte[])payload);
      Object requestedSignatures = map.get("requestedSignatures");
      pigeonResult.setRequestedSignatures((List<String>)requestedSignatures);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SigningResponseDto {
    private @NonNull List<byte[]> signatures;
    public @NonNull List<byte[]> getSignatures() { return signatures; }
    public void setSignatures(@NonNull List<byte[]> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"signatures\" is null.");
      }
      this.signatures = setterArg;
    }

    private @NonNull List<String> resolvedDerivationPaths;
    public @NonNull List<String> getResolvedDerivationPaths() { return resolvedDerivationPaths; }
    public void setResolvedDerivationPaths(@NonNull List<String> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"resolvedDerivationPaths\" is null.");
      }
      this.resolvedDerivationPaths = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private SigningResponseDto() {}
    public static final class Builder {
      private @Nullable List<byte[]> signatures;
      public @NonNull Builder setSignatures(@NonNull List<byte[]> setterArg) {
        this.signatures = setterArg;
        return this;
      }
      private @Nullable List<String> resolvedDerivationPaths;
      public @NonNull Builder setResolvedDerivationPaths(@NonNull List<String> setterArg) {
        this.resolvedDerivationPaths = setterArg;
        return this;
      }
      public @NonNull SigningResponseDto build() {
        SigningResponseDto pigeonReturn = new SigningResponseDto();
        pigeonReturn.setSignatures(signatures);
        pigeonReturn.setResolvedDerivationPaths(resolvedDerivationPaths);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("signatures", signatures);
      toMapResult.put("resolvedDerivationPaths", resolvedDerivationPaths);
      return toMapResult;
    }
    static @NonNull SigningResponseDto fromMap(@NonNull Map<String, Object> map) {
      SigningResponseDto pigeonResult = new SigningResponseDto();
      Object signatures = map.get("signatures");
      pigeonResult.setSignatures((List<byte[]>)signatures);
      Object resolvedDerivationPaths = map.get("resolvedDerivationPaths");
      pigeonResult.setResolvedDerivationPaths((List<String>)resolvedDerivationPaths);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class WalletApiHostCodec extends StandardMessageCodec {
    public static final WalletApiHostCodec INSTANCE = new WalletApiHostCodec();
    private WalletApiHostCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return AccountDto.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return ImplementationLimitsDto.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return SeedDto.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)131:         
          return SigningRequestDto.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)132:         
          return SigningResponseDto.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof AccountDto) {
        stream.write(128);
        writeValue(stream, ((AccountDto) value).toMap());
      } else 
      if (value instanceof ImplementationLimitsDto) {
        stream.write(129);
        writeValue(stream, ((ImplementationLimitsDto) value).toMap());
      } else 
      if (value instanceof SeedDto) {
        stream.write(130);
        writeValue(stream, ((SeedDto) value).toMap());
      } else 
      if (value instanceof SigningRequestDto) {
        stream.write(131);
        writeValue(stream, ((SigningRequestDto) value).toMap());
      } else 
      if (value instanceof SigningResponseDto) {
        stream.write(132);
        writeValue(stream, ((SigningResponseDto) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface WalletApiHost {
    void authorizeSeed(@NonNull Long purpose, Result<Long> result);
    void createSeed(@NonNull Long purpose, Result<Long> result);
    void importSeed(@NonNull Long purpose, Result<Long> result);
    void signMessages(@NonNull Long authToken, @NonNull List<SigningRequestDto> signingRequests, Result<List<SigningResponseDto>> result);
    @NonNull ImplementationLimitsDto getImplementationLimitsForPurpose(@NonNull Long purpose);
    @NonNull Boolean hasUnauthorizedSeedsForPurpose(@NonNull Long purpose);
    @NonNull List<SeedDto> getAuthorizedSeeds();
    @NonNull List<AccountDto> getAccounts(@NonNull Long authToken, @NonNull Boolean isUserWalletOnly);
    @NonNull String resolveDerivationPath(@NonNull String derivationPath, @NonNull Long purpose);
    void deauthorizeSeed(@NonNull Long authToken);
    void updateAccountName(@NonNull Long authToken, @NonNull Long accountId, @Nullable String name);
    void updateAccountIsUserWallet(@NonNull Long authToken, @NonNull Long accountId, @NonNull Boolean isUserWallet);
    void updateAccountIsValid(@NonNull Long authToken, @NonNull Long accountId, @NonNull Boolean isValid);

    /** The codec used by WalletApiHost. */
    static MessageCodec<Object> getCodec() {
      return WalletApiHostCodec.INSTANCE;
    }

    /** Sets up an instance of `WalletApiHost` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, WalletApiHost api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.WalletApiHost.authorizeSeed", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number purposeArg = (Number)args.get(0);
              if (purposeArg == null) {
                throw new NullPointerException("purposeArg unexpectedly null.");
              }
              Result<Long> resultCallback = new Result<Long>() {
                public void success(Long result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.authorizeSeed((purposeArg == null) ? null : purposeArg.longValue(), resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.WalletApiHost.createSeed", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number purposeArg = (Number)args.get(0);
              if (purposeArg == null) {
                throw new NullPointerException("purposeArg unexpectedly null.");
              }
              Result<Long> resultCallback = new Result<Long>() {
                public void success(Long result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.createSeed((purposeArg == null) ? null : purposeArg.longValue(), resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.WalletApiHost.importSeed", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number purposeArg = (Number)args.get(0);
              if (purposeArg == null) {
                throw new NullPointerException("purposeArg unexpectedly null.");
              }
              Result<Long> resultCallback = new Result<Long>() {
                public void success(Long result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.importSeed((purposeArg == null) ? null : purposeArg.longValue(), resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.WalletApiHost.signMessages", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number authTokenArg = (Number)args.get(0);
              if (authTokenArg == null) {
                throw new NullPointerException("authTokenArg unexpectedly null.");
              }
              List<SigningRequestDto> signingRequestsArg = (List<SigningRequestDto>)args.get(1);
              if (signingRequestsArg == null) {
                throw new NullPointerException("signingRequestsArg unexpectedly null.");
              }
              Result<List<SigningResponseDto>> resultCallback = new Result<List<SigningResponseDto>>() {
                public void success(List<SigningResponseDto> result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.signMessages((authTokenArg == null) ? null : authTokenArg.longValue(), signingRequestsArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.WalletApiHost.getImplementationLimitsForPurpose", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number purposeArg = (Number)args.get(0);
              if (purposeArg == null) {
                throw new NullPointerException("purposeArg unexpectedly null.");
              }
              ImplementationLimitsDto output = api.getImplementationLimitsForPurpose((purposeArg == null) ? null : purposeArg.longValue());
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.WalletApiHost.hasUnauthorizedSeedsForPurpose", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number purposeArg = (Number)args.get(0);
              if (purposeArg == null) {
                throw new NullPointerException("purposeArg unexpectedly null.");
              }
              Boolean output = api.hasUnauthorizedSeedsForPurpose((purposeArg == null) ? null : purposeArg.longValue());
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.WalletApiHost.getAuthorizedSeeds", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              List<SeedDto> output = api.getAuthorizedSeeds();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.WalletApiHost.getAccounts", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number authTokenArg = (Number)args.get(0);
              if (authTokenArg == null) {
                throw new NullPointerException("authTokenArg unexpectedly null.");
              }
              Boolean isUserWalletOnlyArg = (Boolean)args.get(1);
              if (isUserWalletOnlyArg == null) {
                throw new NullPointerException("isUserWalletOnlyArg unexpectedly null.");
              }
              List<AccountDto> output = api.getAccounts((authTokenArg == null) ? null : authTokenArg.longValue(), isUserWalletOnlyArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.WalletApiHost.resolveDerivationPath", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String derivationPathArg = (String)args.get(0);
              if (derivationPathArg == null) {
                throw new NullPointerException("derivationPathArg unexpectedly null.");
              }
              Number purposeArg = (Number)args.get(1);
              if (purposeArg == null) {
                throw new NullPointerException("purposeArg unexpectedly null.");
              }
              String output = api.resolveDerivationPath(derivationPathArg, (purposeArg == null) ? null : purposeArg.longValue());
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.WalletApiHost.deauthorizeSeed", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number authTokenArg = (Number)args.get(0);
              if (authTokenArg == null) {
                throw new NullPointerException("authTokenArg unexpectedly null.");
              }
              api.deauthorizeSeed((authTokenArg == null) ? null : authTokenArg.longValue());
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.WalletApiHost.updateAccountName", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number authTokenArg = (Number)args.get(0);
              if (authTokenArg == null) {
                throw new NullPointerException("authTokenArg unexpectedly null.");
              }
              Number accountIdArg = (Number)args.get(1);
              if (accountIdArg == null) {
                throw new NullPointerException("accountIdArg unexpectedly null.");
              }
              String nameArg = (String)args.get(2);
              api.updateAccountName((authTokenArg == null) ? null : authTokenArg.longValue(), (accountIdArg == null) ? null : accountIdArg.longValue(), nameArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.WalletApiHost.updateAccountIsUserWallet", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number authTokenArg = (Number)args.get(0);
              if (authTokenArg == null) {
                throw new NullPointerException("authTokenArg unexpectedly null.");
              }
              Number accountIdArg = (Number)args.get(1);
              if (accountIdArg == null) {
                throw new NullPointerException("accountIdArg unexpectedly null.");
              }
              Boolean isUserWalletArg = (Boolean)args.get(2);
              if (isUserWalletArg == null) {
                throw new NullPointerException("isUserWalletArg unexpectedly null.");
              }
              api.updateAccountIsUserWallet((authTokenArg == null) ? null : authTokenArg.longValue(), (accountIdArg == null) ? null : accountIdArg.longValue(), isUserWalletArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.WalletApiHost.updateAccountIsValid", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number authTokenArg = (Number)args.get(0);
              if (authTokenArg == null) {
                throw new NullPointerException("authTokenArg unexpectedly null.");
              }
              Number accountIdArg = (Number)args.get(1);
              if (accountIdArg == null) {
                throw new NullPointerException("accountIdArg unexpectedly null.");
              }
              Boolean isValidArg = (Boolean)args.get(2);
              if (isValidArg == null) {
                throw new NullPointerException("isValidArg unexpectedly null.");
              }
              api.updateAccountIsValid((authTokenArg == null) ? null : authTokenArg.longValue(), (accountIdArg == null) ? null : accountIdArg.longValue(), isValidArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class Bip32ApiHostCodec extends StandardMessageCodec {
    public static final Bip32ApiHostCodec INSTANCE = new Bip32ApiHostCodec();
    private Bip32ApiHostCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return BipLevelDto.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof BipLevelDto) {
        stream.write(128);
        writeValue(stream, ((BipLevelDto) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface Bip32ApiHost {
    @NonNull List<BipLevelDto> fromUri(@NonNull String uri);
    @NonNull String toUri(@NonNull List<BipLevelDto> levels);

    /** The codec used by Bip32ApiHost. */
    static MessageCodec<Object> getCodec() {
      return Bip32ApiHostCodec.INSTANCE;
    }

    /** Sets up an instance of `Bip32ApiHost` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, Bip32ApiHost api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.Bip32ApiHost.fromUri", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String uriArg = (String)args.get(0);
              if (uriArg == null) {
                throw new NullPointerException("uriArg unexpectedly null.");
              }
              List<BipLevelDto> output = api.fromUri(uriArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.Bip32ApiHost.toUri", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              List<BipLevelDto> levelsArg = (List<BipLevelDto>)args.get(0);
              if (levelsArg == null) {
                throw new NullPointerException("levelsArg unexpectedly null.");
              }
              String output = api.toUri(levelsArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class Bip44ApiHostCodec extends StandardMessageCodec {
    public static final Bip44ApiHostCodec INSTANCE = new Bip44ApiHostCodec();
    private Bip44ApiHostCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return Bip44DerivationDto.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return BipLevelDto.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof Bip44DerivationDto) {
        stream.write(128);
        writeValue(stream, ((Bip44DerivationDto) value).toMap());
      } else 
      if (value instanceof BipLevelDto) {
        stream.write(129);
        writeValue(stream, ((BipLevelDto) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface Bip44ApiHost {
    @NonNull Bip44DerivationDto fromUri(@NonNull String uri);
    @NonNull String toUri(@NonNull Bip44DerivationDto levels);

    /** The codec used by Bip44ApiHost. */
    static MessageCodec<Object> getCodec() {
      return Bip44ApiHostCodec.INSTANCE;
    }

    /** Sets up an instance of `Bip44ApiHost` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, Bip44ApiHost api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.Bip44ApiHost.fromUri", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String uriArg = (String)args.get(0);
              if (uriArg == null) {
                throw new NullPointerException("uriArg unexpectedly null.");
              }
              Bip44DerivationDto output = api.fromUri(uriArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.Bip44ApiHost.toUri", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Bip44DerivationDto levelsArg = (Bip44DerivationDto)args.get(0);
              if (levelsArg == null) {
                throw new NullPointerException("levelsArg unexpectedly null.");
              }
              String output = api.toUri(levelsArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class SeedVaultApiHostCodec extends StandardMessageCodec {
    public static final SeedVaultApiHostCodec INSTANCE = new SeedVaultApiHostCodec();
    private SeedVaultApiHostCodec() {}
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface SeedVaultApiHost {
    @NonNull Boolean isAvailable(@NonNull Boolean allowSimulated);
    void checkPermission(Result<Boolean> result);

    /** The codec used by SeedVaultApiHost. */
    static MessageCodec<Object> getCodec() {
      return SeedVaultApiHostCodec.INSTANCE;
    }

    /** Sets up an instance of `SeedVaultApiHost` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, SeedVaultApiHost api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.SeedVaultApiHost.isAvailable", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Boolean allowSimulatedArg = (Boolean)args.get(0);
              if (allowSimulatedArg == null) {
                throw new NullPointerException("allowSimulatedArg unexpectedly null.");
              }
              Boolean output = api.isAvailable(allowSimulatedArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.SeedVaultApiHost.checkPermission", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.checkPermission(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
