// Autogenerated from Pigeon (v3.2.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.solana.solana_mobile_client;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Api {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class GetCapabilitiesResultDto {
    private @NonNull Boolean supportsCloneAuthorization;
    public @NonNull Boolean getSupportsCloneAuthorization() { return supportsCloneAuthorization; }
    public void setSupportsCloneAuthorization(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"supportsCloneAuthorization\" is null.");
      }
      this.supportsCloneAuthorization = setterArg;
    }

    private @NonNull Boolean supportsSignAndSendTransactions;
    public @NonNull Boolean getSupportsSignAndSendTransactions() { return supportsSignAndSendTransactions; }
    public void setSupportsSignAndSendTransactions(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"supportsSignAndSendTransactions\" is null.");
      }
      this.supportsSignAndSendTransactions = setterArg;
    }

    private @NonNull Long maxTransactionsPerSigningRequest;
    public @NonNull Long getMaxTransactionsPerSigningRequest() { return maxTransactionsPerSigningRequest; }
    public void setMaxTransactionsPerSigningRequest(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"maxTransactionsPerSigningRequest\" is null.");
      }
      this.maxTransactionsPerSigningRequest = setterArg;
    }

    private @NonNull Long maxMessagesPerSigningRequest;
    public @NonNull Long getMaxMessagesPerSigningRequest() { return maxMessagesPerSigningRequest; }
    public void setMaxMessagesPerSigningRequest(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"maxMessagesPerSigningRequest\" is null.");
      }
      this.maxMessagesPerSigningRequest = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private GetCapabilitiesResultDto() {}
    public static final class Builder {
      private @Nullable Boolean supportsCloneAuthorization;
      public @NonNull Builder setSupportsCloneAuthorization(@NonNull Boolean setterArg) {
        this.supportsCloneAuthorization = setterArg;
        return this;
      }
      private @Nullable Boolean supportsSignAndSendTransactions;
      public @NonNull Builder setSupportsSignAndSendTransactions(@NonNull Boolean setterArg) {
        this.supportsSignAndSendTransactions = setterArg;
        return this;
      }
      private @Nullable Long maxTransactionsPerSigningRequest;
      public @NonNull Builder setMaxTransactionsPerSigningRequest(@NonNull Long setterArg) {
        this.maxTransactionsPerSigningRequest = setterArg;
        return this;
      }
      private @Nullable Long maxMessagesPerSigningRequest;
      public @NonNull Builder setMaxMessagesPerSigningRequest(@NonNull Long setterArg) {
        this.maxMessagesPerSigningRequest = setterArg;
        return this;
      }
      public @NonNull GetCapabilitiesResultDto build() {
        GetCapabilitiesResultDto pigeonReturn = new GetCapabilitiesResultDto();
        pigeonReturn.setSupportsCloneAuthorization(supportsCloneAuthorization);
        pigeonReturn.setSupportsSignAndSendTransactions(supportsSignAndSendTransactions);
        pigeonReturn.setMaxTransactionsPerSigningRequest(maxTransactionsPerSigningRequest);
        pigeonReturn.setMaxMessagesPerSigningRequest(maxMessagesPerSigningRequest);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("supportsCloneAuthorization", supportsCloneAuthorization);
      toMapResult.put("supportsSignAndSendTransactions", supportsSignAndSendTransactions);
      toMapResult.put("maxTransactionsPerSigningRequest", maxTransactionsPerSigningRequest);
      toMapResult.put("maxMessagesPerSigningRequest", maxMessagesPerSigningRequest);
      return toMapResult;
    }
    static @NonNull GetCapabilitiesResultDto fromMap(@NonNull Map<String, Object> map) {
      GetCapabilitiesResultDto pigeonResult = new GetCapabilitiesResultDto();
      Object supportsCloneAuthorization = map.get("supportsCloneAuthorization");
      pigeonResult.setSupportsCloneAuthorization((Boolean)supportsCloneAuthorization);
      Object supportsSignAndSendTransactions = map.get("supportsSignAndSendTransactions");
      pigeonResult.setSupportsSignAndSendTransactions((Boolean)supportsSignAndSendTransactions);
      Object maxTransactionsPerSigningRequest = map.get("maxTransactionsPerSigningRequest");
      pigeonResult.setMaxTransactionsPerSigningRequest((maxTransactionsPerSigningRequest == null) ? null : ((maxTransactionsPerSigningRequest instanceof Integer) ? (Integer)maxTransactionsPerSigningRequest : (Long)maxTransactionsPerSigningRequest));
      Object maxMessagesPerSigningRequest = map.get("maxMessagesPerSigningRequest");
      pigeonResult.setMaxMessagesPerSigningRequest((maxMessagesPerSigningRequest == null) ? null : ((maxMessagesPerSigningRequest instanceof Integer) ? (Integer)maxMessagesPerSigningRequest : (Long)maxMessagesPerSigningRequest));
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class ApiLocalAssociationScenarioCodec extends StandardMessageCodec {
    public static final ApiLocalAssociationScenarioCodec INSTANCE = new ApiLocalAssociationScenarioCodec();
    private ApiLocalAssociationScenarioCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return GetCapabilitiesResultDto.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof GetCapabilitiesResultDto) {
        stream.write(128);
        writeValue(stream, ((GetCapabilitiesResultDto) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface ApiLocalAssociationScenario {
    void create(@NonNull Long id, Result<Void> result);
    void start(@NonNull Long id, Result<Void> result);
    void close(@NonNull Long id, Result<Void> result);
    void startActivityForResult(@NonNull Long id, @Nullable String uriPrefix, Result<Void> result);
    void getCapabilities(@NonNull Long id, Result<GetCapabilitiesResultDto> result);

    /** The codec used by ApiLocalAssociationScenario. */
    static MessageCodec<Object> getCodec() {
      return ApiLocalAssociationScenarioCodec.INSTANCE;
    }

    /** Sets up an instance of `ApiLocalAssociationScenario` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, ApiLocalAssociationScenario api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ApiLocalAssociationScenario.create", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number idArg = (Number)args.get(0);
              if (idArg == null) {
                throw new NullPointerException("idArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.create((idArg == null) ? null : idArg.longValue(), resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ApiLocalAssociationScenario.start", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number idArg = (Number)args.get(0);
              if (idArg == null) {
                throw new NullPointerException("idArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.start((idArg == null) ? null : idArg.longValue(), resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ApiLocalAssociationScenario.close", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number idArg = (Number)args.get(0);
              if (idArg == null) {
                throw new NullPointerException("idArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.close((idArg == null) ? null : idArg.longValue(), resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ApiLocalAssociationScenario.startActivityForResult", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number idArg = (Number)args.get(0);
              if (idArg == null) {
                throw new NullPointerException("idArg unexpectedly null.");
              }
              String uriPrefixArg = (String)args.get(1);
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.startActivityForResult((idArg == null) ? null : idArg.longValue(), uriPrefixArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ApiLocalAssociationScenario.getCapabilities", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number idArg = (Number)args.get(0);
              if (idArg == null) {
                throw new NullPointerException("idArg unexpectedly null.");
              }
              Result<GetCapabilitiesResultDto> resultCallback = new Result<GetCapabilitiesResultDto>() {
                public void success(GetCapabilitiesResultDto result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getCapabilities((idArg == null) ? null : idArg.longValue(), resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
