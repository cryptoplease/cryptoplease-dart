// Autogenerated from Pigeon (v3.2.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.solana.sms_wallet;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Api {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class AuthorizeRequestDto {
    private @Nullable String identityName;
    public @Nullable String getIdentityName() { return identityName; }
    public void setIdentityName(@Nullable String setterArg) {
      this.identityName = setterArg;
    }

    private @Nullable String identityUri;
    public @Nullable String getIdentityUri() { return identityUri; }
    public void setIdentityUri(@Nullable String setterArg) {
      this.identityUri = setterArg;
    }

    private @Nullable String iconUri;
    public @Nullable String getIconUri() { return iconUri; }
    public void setIconUri(@Nullable String setterArg) {
      this.iconUri = setterArg;
    }

    public static final class Builder {
      private @Nullable String identityName;
      public @NonNull Builder setIdentityName(@Nullable String setterArg) {
        this.identityName = setterArg;
        return this;
      }
      private @Nullable String identityUri;
      public @NonNull Builder setIdentityUri(@Nullable String setterArg) {
        this.identityUri = setterArg;
        return this;
      }
      private @Nullable String iconUri;
      public @NonNull Builder setIconUri(@Nullable String setterArg) {
        this.iconUri = setterArg;
        return this;
      }
      public @NonNull AuthorizeRequestDto build() {
        AuthorizeRequestDto pigeonReturn = new AuthorizeRequestDto();
        pigeonReturn.setIdentityName(identityName);
        pigeonReturn.setIdentityUri(identityUri);
        pigeonReturn.setIconUri(iconUri);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("identityName", identityName);
      toMapResult.put("identityUri", identityUri);
      toMapResult.put("iconUri", iconUri);
      return toMapResult;
    }
    static @NonNull AuthorizeRequestDto fromMap(@NonNull Map<String, Object> map) {
      AuthorizeRequestDto pigeonResult = new AuthorizeRequestDto();
      Object identityName = map.get("identityName");
      pigeonResult.setIdentityName((String)identityName);
      Object identityUri = map.get("identityUri");
      pigeonResult.setIdentityUri((String)identityUri);
      Object iconUri = map.get("iconUri");
      pigeonResult.setIconUri((String)iconUri);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class AuthorizeResultDto {
    private @NonNull byte[] publicKey;
    public @NonNull byte[] getPublicKey() { return publicKey; }
    public void setPublicKey(@NonNull byte[] setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"publicKey\" is null.");
      }
      this.publicKey = setterArg;
    }

    private @Nullable String accountLabel;
    public @Nullable String getAccountLabel() { return accountLabel; }
    public void setAccountLabel(@Nullable String setterArg) {
      this.accountLabel = setterArg;
    }

    private @Nullable String walletUriBase;
    public @Nullable String getWalletUriBase() { return walletUriBase; }
    public void setWalletUriBase(@Nullable String setterArg) {
      this.walletUriBase = setterArg;
    }

    private @Nullable byte[] scope;
    public @Nullable byte[] getScope() { return scope; }
    public void setScope(@Nullable byte[] setterArg) {
      this.scope = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private AuthorizeResultDto() {}
    public static final class Builder {
      private @Nullable byte[] publicKey;
      public @NonNull Builder setPublicKey(@NonNull byte[] setterArg) {
        this.publicKey = setterArg;
        return this;
      }
      private @Nullable String accountLabel;
      public @NonNull Builder setAccountLabel(@Nullable String setterArg) {
        this.accountLabel = setterArg;
        return this;
      }
      private @Nullable String walletUriBase;
      public @NonNull Builder setWalletUriBase(@Nullable String setterArg) {
        this.walletUriBase = setterArg;
        return this;
      }
      private @Nullable byte[] scope;
      public @NonNull Builder setScope(@Nullable byte[] setterArg) {
        this.scope = setterArg;
        return this;
      }
      public @NonNull AuthorizeResultDto build() {
        AuthorizeResultDto pigeonReturn = new AuthorizeResultDto();
        pigeonReturn.setPublicKey(publicKey);
        pigeonReturn.setAccountLabel(accountLabel);
        pigeonReturn.setWalletUriBase(walletUriBase);
        pigeonReturn.setScope(scope);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("publicKey", publicKey);
      toMapResult.put("accountLabel", accountLabel);
      toMapResult.put("walletUriBase", walletUriBase);
      toMapResult.put("scope", scope);
      return toMapResult;
    }
    static @NonNull AuthorizeResultDto fromMap(@NonNull Map<String, Object> map) {
      AuthorizeResultDto pigeonResult = new AuthorizeResultDto();
      Object publicKey = map.get("publicKey");
      pigeonResult.setPublicKey((byte[])publicKey);
      Object accountLabel = map.get("accountLabel");
      pigeonResult.setAccountLabel((String)accountLabel);
      Object walletUriBase = map.get("walletUriBase");
      pigeonResult.setWalletUriBase((String)walletUriBase);
      Object scope = map.get("scope");
      pigeonResult.setScope((byte[])scope);
      return pigeonResult;
    }
  }
  private static class ApiFlutterCodec extends StandardMessageCodec {
    public static final ApiFlutterCodec INSTANCE = new ApiFlutterCodec();
    private ApiFlutterCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return AuthorizeRequestDto.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return AuthorizeResultDto.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof AuthorizeRequestDto) {
        stream.write(128);
        writeValue(stream, ((AuthorizeRequestDto) value).toMap());
      } else 
      if (value instanceof AuthorizeResultDto) {
        stream.write(129);
        writeValue(stream, ((AuthorizeResultDto) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class ApiFlutter {
    private final BinaryMessenger binaryMessenger;
    public ApiFlutter(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return ApiFlutterCodec.INSTANCE;
    }

    public void onScenarioReady(@NonNull Long idArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ApiFlutter.onScenarioReady", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(idArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onScenarioServingClients(@NonNull Long idArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ApiFlutter.onScenarioServingClients", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(idArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onScenarioServingComplete(@NonNull Long idArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ApiFlutter.onScenarioServingComplete", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(idArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onScenarioComplete(@NonNull Long idArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ApiFlutter.onScenarioComplete", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(idArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onScenarioError(@NonNull Long idArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ApiFlutter.onScenarioError", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(idArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onScenarioTeardownComplete(@NonNull Long idArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ApiFlutter.onScenarioTeardownComplete", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(idArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void authorize(@NonNull AuthorizeRequestDto requestArg, @NonNull Long idArg, Reply<AuthorizeResultDto> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ApiFlutter.authorize", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(requestArg, idArg)), channelReply -> {
        @SuppressWarnings("ConstantConditions")
        AuthorizeResultDto output = (AuthorizeResultDto)channelReply;
        callback.reply(output);
      });
    }
  }
  private static class ApiHostCodec extends StandardMessageCodec {
    public static final ApiHostCodec INSTANCE = new ApiHostCodec();
    private ApiHostCodec() {}
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface ApiHost {
    void start(@NonNull Long id);
    void close(@NonNull Long id);

    /** The codec used by ApiHost. */
    static MessageCodec<Object> getCodec() {
      return ApiHostCodec.INSTANCE;
    }

    /** Sets up an instance of `ApiHost` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, ApiHost api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ApiHost.start", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number idArg = (Number)args.get(0);
              if (idArg == null) {
                throw new NullPointerException("idArg unexpectedly null.");
              }
              api.start((idArg == null) ? null : idArg.longValue());
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ApiHost.close", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number idArg = (Number)args.get(0);
              if (idArg == null) {
                throw new NullPointerException("idArg unexpectedly null.");
              }
              api.close((idArg == null) ? null : idArg.longValue());
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
