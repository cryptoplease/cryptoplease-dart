name: Check PR
on:
  pull_request:
    branches:
      - master

concurrency:
  group: ${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  formatting:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: dart-lang/setup-dart@v1.3

      - name: Verify formatting
        run: dart format --output=none --set-exit-if-changed .

  dart_libs:
    needs: [formatting]
    runs-on: ubuntu-latest
    env:
      SCOPE: --no-flutter --ignore="cryptoplease*" --ignore="solana"

    steps:
      - uses: actions/checkout@v2
      - uses: dart-lang/setup-dart@v1.3

      - name: Activate melos
        run: make activate_melos

      - name: Install dependencies
        run: melos exec -c 1 ${{ env.SCOPE }} -- make dart_get

      - name: Analyze project source
        run: melos exec -c 1 ${{ env.SCOPE }} -- make dart_analyze

      - name: Run tests
        run: melos exec -c 1 ${{ env.SCOPE }} --dir-exists="test" -- make dart_test

  cryptoplease_link:
    needs: [formatting]
    runs-on: ubuntu-latest
    env:
      SCOPE: --scope="cryptoplease_link" --scope="cryptoplease_api"

    steps:
      - uses: actions/checkout@v2
      - uses: dart-lang/setup-dart@v1.3

      - name: Activate melos
        run: make activate_melos

      - name: Install dependencies
        run: melos exec -c 1 ${{ env.SCOPE }} -- make dart_get

      - name: Analyze project source
        run: melos exec -c 1 ${{ env.SCOPE }} -- make dart_analyze

      - name: Run tests
        run: melos exec -c 1 ${{ env.SCOPE }} --dir-exists="test" -- make dart_test

  solana:
    needs: [formatting]
    strategy:
      fail-fast: false
      matrix:
        solanaVersion: ["stable", "beta"]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: read
    env:
      DEVNET_RPC_URL: "http://solana:8899"
      DEVNET_WEBSOCKET_URL: "ws://solana:8900"
      SCOPE: --scope="solana"
    container:
      image: ghcr.io/cryptoplease/flutter:3.0.5
    services:
      solana:
        image: solanalabs/solana:${{ matrix.solanaVersion }}
        options: --entrypoint="solana-test-validator"
    steps:
      - uses: actions/checkout@v2
      - run: echo "$HOME/.pub-cache/bin" >> $GITHUB_PATH

      - name: Activate remove_from_coverage
        run: dart pub global activate remove_from_coverage

      - name: Install dependencies
        run: melos exec -c 1 ${{ env.SCOPE }} -- make dart_get

      - name: Analyze
        run: melos exec -c 1 ${{ env.SCOPE }} -- make dart_analyze

      - name: Test
        run: melos exec -c 1 ${{ env.SCOPE }} -- dart run test --coverage=coverage

      - name: Coverage
        run: melos exec -c 1 ${{ env.SCOPE }} -- make dart_coverage

      - uses: codecov/codecov-action@v3
        with:
          flags: solana-${{ matrix.solanaVersion }}

  solana_mobile:
    needs: [formatting]
    runs-on: ubuntu-latest
    env:
      SCOPE: --scope="solana_mobile_*"
    steps:
      - uses: actions/checkout@v2

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.0.5"

      - name: Activate melos
        run: make activate_melos

      - name: Install dependencies
        run: melos exec -c 1 ${{ env.SCOPE }} -- make flutter_get

      - name: Analyze
        run: melos exec -c 1 ${{ env.SCOPE }} -- make flutter_analyze

      - name: Test
        run: melos exec -c 1 ${{ env.SCOPE }} --dir-exists="test" -- make flutter_test

  cryptoplease:
    needs: [formatting]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: read
    env:
      SOLANA_RPC_URL: "http://solana:8899"
      SOLANA_WEBSOCKET_URL: "ws://solana:8900"
      SCOPE: --scope="cryptoplease" --scope="cryptoplease_ui" --scope="storybook"
    container:
      image: ghcr.io/cryptoplease/flutter:3.0.5
    services:
      solana:
        image: solanalabs/solana:stable
        options: --entrypoint="solana-test-validator"
    steps:
      - uses: actions/checkout@v2

      - name: Install dependencies
        run: melos exec -c 1 ${{ env.SCOPE }} -- make flutter_get

      - name: Run build_runner
        run: melos exec -c 1 ${{ env.SCOPE }} --depends-on="build_runner" -- make flutter_build

      - name: Generate test schemas
        run: melos exec -c 1 ${{ env.SCOPE }} --depends-on="drift_dev" -- make flutter_generate_test_schemas

      - name: Analyze
        run: melos exec -c 1 ${{ env.SCOPE }} -- make flutter_analyze

      - name: Test
        run: melos exec -c 1 ${{ env.SCOPE }} --dir-exists="test" -- make flutter_test

      - name: Store failure artifacts
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: golden-test-failure
          path: "**/test/golden/**/failures/"
